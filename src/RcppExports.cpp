// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// my_gam
double my_gam(double x);
RcppExport SEXP _NakaEstim_my_gam(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(my_gam(x));
    return rcpp_result_gen;
END_RCPP
}
// mu
double mu(double x, double y);
RcppExport SEXP _NakaEstim_mu(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(mu(x, y));
    return rcpp_result_gen;
END_RCPP
}
// sig
double sig(double x, double y);
RcppExport SEXP _NakaEstim_sig(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(sig(x, y));
    return rcpp_result_gen;
END_RCPP
}
// my_HPD
NumericVector my_HPD(NumericVector x);
RcppExport SEXP _NakaEstim_my_HPD(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(my_HPD(x));
    return rcpp_result_gen;
END_RCPP
}
// spmk_fun
double spmk_fun(Rcpp::NumericVector para, double l, double u, double t, double m, double s);
RcppExport SEXP _NakaEstim_spmk_fun(SEXP paraSEXP, SEXP lSEXP, SEXP uSEXP, SEXP tSEXP, SEXP mSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type para(paraSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(spmk_fun(para, l, u, t, m, s));
    return rcpp_result_gen;
END_RCPP
}
// spmk_grad
Rcpp::NumericVector spmk_grad(Rcpp::NumericVector para, double l, double u, double t, double m, double s);
RcppExport SEXP _NakaEstim_spmk_grad(SEXP paraSEXP, SEXP lSEXP, SEXP uSEXP, SEXP tSEXP, SEXP mSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type para(paraSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(spmk_grad(para, l, u, t, m, s));
    return rcpp_result_gen;
END_RCPP
}
// GenData
Rcpp::NumericVector GenData(Rcpp::NumericVector para, Rcpp::NumericVector R);
RcppExport SEXP _NakaEstim_GenData(SEXP paraSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type para(paraSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(GenData(para, R));
    return rcpp_result_gen;
END_RCPP
}
// Estim
Rcpp::List Estim(arma::vec para, arma::vec X, arma::vec R, int k, std::string type, std::string method, arma::vec lw, arma::vec up);
RcppExport SEXP _NakaEstim_Estim(SEXP paraSEXP, SEXP XSEXP, SEXP RSEXP, SEXP kSEXP, SEXP typeSEXP, SEXP methodSEXP, SEXP lwSEXP, SEXP upSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type para(paraSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lw(lwSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type up(upSEXP);
    rcpp_result_gen = Rcpp::wrap(Estim(para, X, R, k, type, method, lw, up));
    return rcpp_result_gen;
END_RCPP
}
// MH_sample
Rcpp::List MH_sample(std::string type, NumericVector para, NumericVector se, NumericVector R, NumericVector X, int k, double l, double u, double t, int MC_size, int MC_burn, double q, double c, int verbose, bool display_progress);
RcppExport SEXP _NakaEstim_MH_sample(SEXP typeSEXP, SEXP paraSEXP, SEXP seSEXP, SEXP RSEXP, SEXP XSEXP, SEXP kSEXP, SEXP lSEXP, SEXP uSEXP, SEXP tSEXP, SEXP MC_sizeSEXP, SEXP MC_burnSEXP, SEXP qSEXP, SEXP cSEXP, SEXP verboseSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type para(paraSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type se(seSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type MC_size(MC_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type MC_burn(MC_burnSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(MH_sample(type, para, se, R, X, k, l, u, t, MC_size, MC_burn, q, c, verbose, display_progress));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_NakaEstim_my_gam", (DL_FUNC) &_NakaEstim_my_gam, 1},
    {"_NakaEstim_mu", (DL_FUNC) &_NakaEstim_mu, 2},
    {"_NakaEstim_sig", (DL_FUNC) &_NakaEstim_sig, 2},
    {"_NakaEstim_my_HPD", (DL_FUNC) &_NakaEstim_my_HPD, 1},
    {"_NakaEstim_spmk_fun", (DL_FUNC) &_NakaEstim_spmk_fun, 6},
    {"_NakaEstim_spmk_grad", (DL_FUNC) &_NakaEstim_spmk_grad, 6},
    {"_NakaEstim_GenData", (DL_FUNC) &_NakaEstim_GenData, 2},
    {"_NakaEstim_Estim", (DL_FUNC) &_NakaEstim_Estim, 8},
    {"_NakaEstim_MH_sample", (DL_FUNC) &_NakaEstim_MH_sample, 15},
    {NULL, NULL, 0}
};

RcppExport void R_init_NakaEstim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
